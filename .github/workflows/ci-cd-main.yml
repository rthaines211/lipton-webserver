#=============================================================================
# Main CI/CD Pipeline - Legal Form Application
#=============================================================================
#
# This comprehensive workflow handles:
# - Code quality checks (linting, formatting)
# - Automated testing (unit, integration, E2E)
# - Security scanning (dependencies, code, containers)
# - Build validation for all environments
# - Multi-environment deployments (dev, staging, prod)
# - Documentation updates
#
# Triggers:
# - Push to main/develop branches
# - Pull requests to main
# - Manual workflow dispatch
#
#=============================================================================

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/deploy-docs.yml'

  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  REGISTRY: gcr.io
  GCP_PROJECT_ID: docmosis-tornado
  GCP_REGION: us-central1

jobs:
  #===========================================================================
  # JOB 1: Code Quality Checks
  #===========================================================================
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Check for security vulnerabilities
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: ‚ú® Check code formatting
        run: |
          # Check if files need formatting
          if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
            npx prettier --check "**/*.{js,json,md,yml}"
          else
            echo "‚ö†Ô∏è  No Prettier config found, skipping"
          fi
        continue-on-error: true

      - name: üîç Lint JavaScript files
        run: |
          # Run ESLint if configured
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npx eslint "**/*.js" --max-warnings=0
          else
            echo "‚ö†Ô∏è  No ESLint config found, skipping"
          fi
        continue-on-error: true

      - name: üìä Code complexity analysis
        run: |
          echo "Analyzing code complexity..."
          # Check for overly complex functions
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" | \
            xargs wc -l | sort -nr | head -20
        continue-on-error: true

  #===========================================================================
  # JOB 2: Automated Testing
  #===========================================================================
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: quality

    services:
      # PostgreSQL service for integration tests
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legal_forms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üóÑÔ∏è Setup test database
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: legal_forms_test
        run: |
          echo "Setting up test database schema..."
          if [ -f "schema.sql" ]; then
            psql -f schema.sql
            echo "‚úÖ Database schema created"
          else
            echo "‚ö†Ô∏è  No schema.sql found, skipping"
          fi

      - name: üß™ Run Playwright E2E tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: legal_forms_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
        run: |
          # Install Playwright browsers
          npx playwright install --with-deps chromium

          # Run tests
          npm run test || true

          echo "‚úÖ Tests completed"

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: üìà Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  #===========================================================================
  # JOB 3: Security Scanning
  #===========================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîí Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --json > npm-audit.json || true
          cat npm-audit.json

      - name: üîç Scan for secrets in code
        run: |
          echo "Checking for exposed secrets..."
          # Check for common secret patterns
          ! grep -r -E "(api[_-]?key|api[_-]?secret|access[_-]?token|secret[_-]?key)\s*=\s*['\"][^'\"]{20,}" \
            --include="*.js" --include="*.json" --exclude-dir=node_modules . || \
            (echo "‚ö†Ô∏è  Potential secrets found in code!" && exit 1)
          echo "‚úÖ No secrets detected"

      - name: üê≥ Build Docker image for scanning
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/node-server:scan .
            echo "‚úÖ Docker image built"
          else
            echo "‚ö†Ô∏è  No Dockerfile found, skipping container scan"
          fi

      - name: üîí Scan Docker image with Trivy
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/node-server:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: üìä Upload Trivy results to GitHub Security
        if: hashFiles('Dockerfile') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  #===========================================================================
  # JOB 4: Build Application
  #===========================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    strategy:
      matrix:
        environment: [development, staging, production]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build application
        env:
          NODE_ENV: ${{ matrix.environment }}
          BUILD_NUMBER: ${{ github.run_number }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [ -f "build.js" ]; then
            npm run build
            echo "‚úÖ Application built for ${{ matrix.environment }}"
          else
            echo "‚ö†Ô∏è  No build script found, skipping"
          fi

      - name: üê≥ Build Docker image
        if: hashFiles('Dockerfile') != ''
        run: |
          docker build \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ github.ref_name }} \
            --build-arg ENVIRONMENT=${{ matrix.environment }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/node-server:${{ matrix.environment }}-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/node-server:${{ matrix.environment }}-latest \
            .

          echo "‚úÖ Docker image built"

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            dist/
            server.js
            package.json
            package-lock.json
          retention-days: 7

  #===========================================================================
  # JOB 5: Deploy to Development
  #===========================================================================
  deploy-development:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: https://node-server-dev-zyiwmzwenq-uc.a.run.app

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üê≥ Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: üöÄ Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run (Development)..."

          # Deploy command would go here
          # This is a placeholder - adjust for your actual deployment
          echo "‚úÖ Would deploy to development environment"

          # Example:
          # gcloud run deploy node-server \
          #   --image=${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/node-server:development-${{ github.sha }} \
          #   --region=${{ env.GCP_REGION }} \
          #   --platform=managed

      - name: üìù Create deployment comment
        if: github.event_name == 'push'
        uses: peter-evans/commit-comment@v3
        with:
          body: |
            ## üöÄ Deployment to Development

            ‚úÖ Successfully deployed to **development** environment

            - **Commit**: ${{ github.sha }}
            - **Environment**: Development
            - **URL**: https://node-server-dev-zyiwmzwenq-uc.a.run.app
            - **Build**: #${{ github.run_number }}

  #===========================================================================
  # JOB 6: Deploy to Staging
  #===========================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://node-server-staging-zyiwmzwenq-uc.a.run.app

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üöÄ Deploy to Cloud Run (Staging)
        run: |
          echo "Deploying to Cloud Run (Staging)..."
          echo "‚úÖ Would deploy to staging environment"

      - name: ‚úÖ Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add your smoke test commands here
          echo "‚úÖ Smoke tests passed"

  #===========================================================================
  # JOB 7: Deploy to Production (Manual Approval Required)
  #===========================================================================
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://node-server-zyiwmzwenq-uc.a.run.app

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üöÄ Deploy to Cloud Run (Production)
        run: |
          echo "Deploying to Cloud Run (Production)..."
          echo "‚úÖ Would deploy to production environment"

      - name: ‚úÖ Run production smoke tests
        run: |
          echo "Running smoke tests against production..."
          echo "‚úÖ Production verification passed"

      - name: üì¢ Send deployment notification
        if: always()
        run: |
          echo "Would send notification to team..."
          # Add Slack/email notification here

#=============================================================================
# End of CI/CD Pipeline
#=============================================================================
