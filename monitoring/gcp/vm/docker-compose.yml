#=============================================================================
# Docker Compose for Prometheus Metrics Collection on docmosis-tornado-vm
#
# This stack runs on the existing docmosis-tornado-vm alongside NGINX and Docmosis.
# It collects metrics from:
# - Local NGINX (via nginx-prometheus-exporter)
# - Local Docmosis service (if metrics available)
# - Cloud Run services (node-server, python-pipeline)
#
# Metrics are forwarded to Google Managed Prometheus for long-term storage.
#
# Usage:
#   cd /home/ubuntu/monitoring
#   docker-compose up -d          # Start in background
#   docker-compose logs -f         # View logs
#   docker-compose down            # Stop containers
#
# Access (via SSH tunnel):
#   Grafana UI: http://localhost:3000 (admin/tornado2025!)
#   Prometheus UI: http://localhost:9090 (internal only)
#   NGINX Exporter: http://localhost:9113/metrics
#
# Prerequisites:
#   - NGINX configured with stub_status endpoint
#   - Service account with monitoring.metricWriter role attached to VM
#
#=============================================================================

version: '3.8'

services:
  #
  # NGINX Prometheus Exporter
  # Scrapes NGINX stub_status and exposes metrics for Prometheus
  #
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped

    ports:
      - "9113:9113"  # Metrics endpoint

    # Command arguments for exporter
    # Points to NGINX stub_status endpoint (must be configured in NGINX)
    command:
      - '--nginx.scrape-uri=http://host.docker.internal:8081/nginx_status'
      - '--web.telemetry-path=/metrics'

    # Allow access to host machine (for NGINX on host)
    extra_hosts:
      - "host.docker.internal:host-gateway"

    networks:
      - monitoring

    # Health check removed - container is distroless (no shell/curl/wget)
    # Monitoring will verify metrics endpoint availability instead

  #
  # Prometheus
  # Scrapes metrics from all sources and forwards to Google Managed Prometheus
  #
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped

    ports:
      - "9090:9090"  # Web UI and API

    volumes:
      # Configuration files
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

      # Local data storage (7-day retention, older data in Managed Prometheus)
      - prometheus-data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'  # Keep 7 days local, rest in Managed Prometheus
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'  # Allow config reload via API
      - '--web.enable-admin-api'  # Enable admin API for debugging

    networks:
      - monitoring

    # Allow access to host machine and nginx-exporter
    extra_hosts:
      - "host.docker.internal:host-gateway"

    depends_on:
      nginx-exporter:
        condition: service_started

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  #
  # Grafana
  # Visualization and dashboarding for Prometheus metrics
  #
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped

    ports:
      - "3000:3000"  # Web UI

    volumes:
      # Persistent data storage
      - grafana-data:/var/lib/grafana

      # Provisioning configuration (auto-configure Prometheus datasource)
      - ./grafana/provisioning:/etc/grafana/provisioning

    environment:
      # Server settings
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_DOMAIN=localhost

      # Security settings
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=tornado2025!
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false

      # Analytics and reporting
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false

    networks:
      - monitoring

    depends_on:
      prometheus:
        condition: service_healthy

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

#=============================================================================
# NETWORKS
#=============================================================================

networks:
  monitoring:
    name: monitoring
    driver: bridge

#=============================================================================
# VOLUMES
#=============================================================================

volumes:
  # Prometheus data volume
  # Stores recent metrics locally (7-day retention)
  # Older metrics are in Google Managed Prometheus
  # Docker will manage this volume automatically (no hardcoded paths)
  prometheus-data:
    driver: local

  # Grafana data volume
  # Stores dashboards, datasources, and user preferences
  grafana-data:
    driver: local

#=============================================================================
# NOTES
#=============================================================================
#
# Cost Optimization:
# - 7-day local retention keeps recent data for fast queries
# - Older data stored in Managed Prometheus (cheaper long-term storage)
# - NGINX exporter is lightweight (< 10MB memory)
#
# Security:
# - Prometheus and exporters run as non-root users
# - No public exposure (internal network only)
# - Service account credentials auto-mounted from VM metadata
#
# Monitoring Stack:
# - This VM collector -> Google Managed Prometheus -> Grafana (Cloud Run)
#
#=============================================================================
