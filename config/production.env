# Production Environment Configuration
# This file defines ALL environment variables for production deployment
# Used by: GitHub Actions CI/CD and manual deployment scripts
#
# ⚠️  DO NOT put sensitive values (passwords, API keys) in this file!
# ⚠️  Sensitive values are managed in GCP Secret Manager
#
# Last Updated: October 27, 2025

# ============================================
# Core Application Configuration
# ============================================

# Application environment (enables production features)
NODE_ENV=production

# Server port (Cloud Run automatically sets this, but we define for clarity)
# PORT=8080  # ⚠️ Cloud Run sets this automatically - DO NOT specify here

# ============================================
# Database Configuration (PostgreSQL)
# ============================================

# Database username (from GCP Secret: db-user)
DB_USER=app-user

# Database host - Cloud SQL Unix socket path
# Format: /cloudsql/PROJECT_ID:REGION:INSTANCE_NAME
# TODO: Replace INSTANCE_NAME with your actual Cloud SQL instance name
DB_HOST=/cloudsql/docmosis-tornado:us-central1:legal-forms-db

# Database name
DB_NAME=legal_forms_db

# Database port (standard PostgreSQL port)
DB_PORT=5432

# DB_PASSWORD is managed in GCP Secret Manager (not here)
# Mounted via: --update-secrets=DB_PASSWORD=DB_PASSWORD:latest

# ============================================
# Python Normalization Pipeline Configuration
# ============================================

# Python FastAPI service URL
PIPELINE_API_URL=https://python-pipeline-zyiwmzwenq-uc.a.run.app

# Enable pipeline integration
PIPELINE_API_ENABLED=true

# Pipeline request timeout (5 minutes = 300000ms)
# Forms with large documents may take longer to process
PIPELINE_API_TIMEOUT=300000

# Pipeline API key (currently not used, but reserved for future)
PIPELINE_API_KEY=

# Execute pipeline automatically when forms are submitted
EXECUTE_PIPELINE_ON_SUBMIT=true

# Continue saving form even if pipeline fails
# Ensures data isn't lost if pipeline has issues
CONTINUE_ON_PIPELINE_FAILURE=true

# ============================================
# Dropbox Configuration
# ============================================

# Enable Dropbox uploads
DROPBOX_ENABLED=true

# Base folder path in Dropbox where documents are stored
# Documents are organized as: /Current Clients/[case-number]/[documents]
DROPBOX_BASE_PATH=/Current Clients

# Local output directory (relative to container working directory)
# Documents are temporarily stored here before Dropbox upload
LOCAL_OUTPUT_PATH=output

# Continue saving locally even if Dropbox upload fails
# Ensures documents aren't lost if Dropbox has issues
CONTINUE_ON_DROPBOX_FAILURE=true

# DROPBOX_ACCESS_TOKEN is managed in GCP Secret Manager (not here)
# Mounted via: --update-secrets=DROPBOX_ACCESS_TOKEN=dropbox-token:latest
#
# NOTE: Current implementation uses short-lived access tokens
# Consider migrating to OAuth refresh tokens (like Python service)
# to prevent token expiration issues

# ============================================
# Email Notification Configuration
# ============================================

# Email service provider
EMAIL_PROVIDER=sendgrid

# Email sender address (must be verified in SendGrid)
EMAIL_FROM_ADDRESS=notifications@liptonlegal.com

# Email sender name (appears in "From" field)
EMAIL_FROM_NAME=Lipton Legal

# Enable email notifications
EMAIL_ENABLED=true

# Maximum retry attempts for failed emails
EMAIL_MAX_RETRIES=3

# Delay between retry attempts (milliseconds)
# Uses exponential backoff: 1s, 2s, 4s
EMAIL_RETRY_DELAY_MS=1000

# SENDGRID_API_KEY is managed in GCP Secret Manager (not here)
# Mounted via: --update-secrets=SENDGRID_API_KEY=sendgrid-api-key:latest

# ============================================
# Google Cloud Platform Configuration
# ============================================

# GCP project ID
GCLOUD_PROJECT=docmosis-tornado

# Cloud Storage bucket for form submissions
# Bucket naming: PROJECT_ID-form-submissions
GCS_BUCKET_NAME=docmosis-tornado-form-submissions

# ============================================
# Docmosis Document Generation
# ============================================

# Docmosis API endpoint (internal VM)
# Shared between staging and production for document generation
DOCMOSIS_API_URL=http://10.128.0.3:8080/api/render
DOCMOSIS_ENABLED=true

# ============================================
# Authentication Configuration
# ============================================

# ACCESS_TOKEN is managed in GCP Secret Manager (not here)
# Mounted via: --update-secrets=ACCESS_TOKEN=ACCESS_TOKEN:latest
#
# When NODE_ENV=production:
# - Authentication is REQUIRED for all non-static endpoints
# - Token must be provided via:
#   - URL query: ?token=YOUR_TOKEN
#   - Header: Authorization: Bearer YOUR_TOKEN

# ============================================
# Notes on Secret Management
# ============================================
#
# Sensitive values are NOT stored in this file. They are managed in GCP Secret Manager:
#
# Secrets:
#   - DB_PASSWORD         → GCP Secret: DB_PASSWORD:latest
#   - ACCESS_TOKEN        → GCP Secret: ACCESS_TOKEN:latest
#   - SENDGRID_API_KEY    → GCP Secret: sendgrid-api-key:latest
#   - DROPBOX_ACCESS_TOKEN → GCP Secret: dropbox-token:latest
#
# To update secrets:
#   echo -n "new-value" | gcloud secrets versions add SECRET_NAME --data-file=-
#
# To view secrets (requires permission):
#   gcloud secrets versions access latest --secret=SECRET_NAME
#
# Cloud Run automatically mounts these as environment variables using:
#   --update-secrets="VAR_NAME=SECRET_NAME:VERSION"
